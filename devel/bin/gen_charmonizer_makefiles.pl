#!/usr/bin/perl

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use warnings;
use File::Find qw( find );
use FindBin;

-d "src" or die "Switch to the directory containg the charmonizer src/.\n";

my (@srcs, @tests, @hdrs);
my $license = "";

sub wanted {
    if (/\.c$/) {
        if (/^Test/) {
            push @tests, $File::Find::name;
        }
        else {
            push @srcs, $File::Find::name;
        }
    }
    elsif (/\.h$/) {
        push @hdrs, $File::Find::name;
    }
}

sub unixify {
    map { my $copy = $_; $copy =~ tr{\\}{/}; $copy } @_;
}

sub winnify {
    map { my $copy = $_; $copy =~ tr{/}{\\}; $copy } @_;
}

sub objectify {
    my @objects = @_;
    for (@objects) {
        s/\.c$/\$(OBJEXT)/ or die "No match: $_";
    }
    return @objects;
}

sub test_execs {
    my @test_execs = grep { $_ !~ /Test\.c/ } @_; # skip Test.c entry
    for (@test_execs) {
        s/.*(Test\w+)\.c$/$1\$(EXEEXT)/ or die "no match: $_";
    }
    return @test_execs;
}

sub test_blocks {
    my @c_files = grep { $_ !~ /Test\.c/ } @_; # skip Test.c entry
    my @blocks;
    for my $c_file (@c_files) {
        my $exe = $c_file; 
        $exe =~ s/.*(Test\w+)\.c$/$1\$(EXEEXT)/ or die "no match $exe";
        my $obj = $c_file;
        $obj =~ s/\.c$/\$(OBJEXT)/ or die "no match: $obj";
        push @blocks, <<END_BLOCK;
$exe: src/Charmonizer/Test\$(OBJEXT) $obj
\t\$(LINKER) \$(LINKFLAGS) src/Charmonizer/Test\$(OBJEXT) $obj \$(LINKOUT)"\$@"
END_BLOCK
    }
    return @blocks;
}

sub clean_target_posix {
    qq|clean:\n\trm -f \$(CLEANABLE)|;
}

sub clean_target_win {
    qq|clean:\n\tCMD /c FOR %i IN (\$(CLEANABLE)) DO IF EXIST %i DEL /F %i|;
}

sub makefile_top_posix {
    return <<END_STUFF;
CC= cc
DEFS=
CFLAGS= -Isrc \$(DEFS)
OBJEXT= .o
EXEEXT=
LINKER= \$(CC)
LINKFLAGS= \$(CFLAGS)
LINKOUT= -o

.c.o:
\t\$(CC) \$(CFLAGS) -c \$*.c -o \$@
END_STUFF
}

sub makefile_top_msvc {
    return <<END_STUFF;
CC= cl
DEFS=
CFLAGS= -Isrc -nologo -D_CRT_SECURE_NO_WARNINGS \$(DEFS)
OBJEXT= .obj
EXEEXT= .exe
LINKER= link
LINKFLAGS= -nologo
LINKOUT= /OUT:

.c.obj:
\t\$(CC) \$(CFLAGS) -c \$< -Fo\$@
END_STUFF
}

sub makefile_top_mingw {
    return <<END_STUFF;
CC= gcc
DEFS=
CFLAGS= -Isrc \$(DEFS)
OBJEXT= .o
EXEEXT= .exe
LINKER= \$(CC)
LINKFLAGS= \$(CFLAGS)
LINKOUT= -o

.c.o:
\t\$(CC) \$(CFLAGS) -c \$*.c -o \$@
END_STUFF
}

sub gen_makefile {
    my %args = @_;
    open my $fh, ">", $args{file} or die "open '$args{file}' failed: $!\n";
    my $content = <<EOT;
# GENERATED BY $FindBin::Script: do not hand-edit!!!
#
$license
$args{top}
PROGNAME= charmonize\$(EXEEXT)

TESTS= $args{test_execs}

OBJS= $args{objs}

TEST_OBJS= $args{test_objs}

HEADERS= $args{headers}

CLEANABLE= \$(OBJS) \$(PROGNAME) \$(TEST_OBJS) \$(TESTS) *.pdb

all: \$(PROGNAME)

\$(PROGNAME): \$(OBJS)
	\$(LINKER) \$(LINKFLAGS) \$(OBJS) \$(LINKOUT)"\$(PROGNAME)"

\$(OBJS) \$(TEST_OBJS): \$(HEADERS)

tests: \$(TESTS)

$args{test_blocks}
$args{clean_target}

EOT
    print $fh $content;
}

### actual script follows

open my $fh, $0 or die "Can't open $0: $!\n";
scalar <$fh>, scalar <$fh>; # skip first 2 lines
while (<$fh>) {
    /^#/ or last;
    $license .= $_;
}

push @srcs, "charmonize.c";
find \&wanted, "src";
@srcs  = sort @srcs;
@hdrs  = sort @hdrs;
@tests = sort @tests;
my @objects      = objectify(@srcs);
my @test_objects = objectify(@tests);
my @test_execs   = test_execs(@tests);
my @test_blocks  = test_blocks(@tests);

gen_makefile
    test_execs   => join(" ", unixify(@test_execs)),
    objs         => join(" ", unixify(@objects)),
    test_objs    => join(" ", unixify(@test_objects)),
    headers      => join(" ", unixify(@hdrs)),
    test_blocks  => join("\n", unixify(@test_blocks)),
    top          => makefile_top_posix(),
    clean_target => clean_target_posix(),
    file         => 'Makefile';

gen_makefile
    test_execs   => join(" ", winnify(@test_execs)),
    objs         => join(" ", winnify(@objects)),
    test_objs    => join(" ", winnify(@test_objects)),
    headers      => join(" ", winnify(@hdrs)),
    test_blocks  => join("\n", winnify(@test_blocks)),
    top          => makefile_top_msvc(),
    clean_target => clean_target_win(),
    file         => 'Makefile.MSVC';

gen_makefile
    test_execs   => join(" ", winnify(@test_execs)),
    objs         => join(" ", winnify(@objects)),
    test_objs    => join(" ", winnify(@test_objects)),
    headers      => join(" ", winnify(@hdrs)),
    test_blocks  => join("\n", winnify(@test_blocks)),
    top          => makefile_top_mingw(),
    clean_target => clean_target_win(),
    file         => 'Makefile.MinGW';

__END__

=head1 NAME

gen_charmonizer_makefiles.pl

=head1 SYNOPSIS

    gen_charmonizer_makefiles.pl - keeps the Makefiles in sync with the live tree.

=head1 DESCRIPTION

Be sure to run this code from the charmonizer subdirectory (where the
existing Makefiles live).

