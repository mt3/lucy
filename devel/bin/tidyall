#!/usr/local/bin/perl

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use warnings;

use File::Find qw( find );
use Text::Diff;
use Perl::Tidy;

my $source_dir = shift @ARGV;
die "usage: tidyall DIR" unless defined $source_dir;

my $perltidyrc
    = '--perl-best-practices '
    . '--nostandard-output '
    . '--nostandard-error-output '
    . '--noblanks-before-comments '
    . '--noblanks-before-subs';

# Grab all perl filepaths
my @paths;
find(
    {   wanted => sub {
            push @paths, $File::Find::name
                if $File::Find::name =~ /\.(pm|t|pl|plx|cgi)$/i;
        },
        no_chdir => 1,
    },
    $source_dir
);

for my $path (@paths) {
    # Grab orig text
    print "$path\n";
    open( my $fh, '<', $path )
        or die "couldn't open file '$path' for reading: $!";
    my $orig_text = do { local $/; <$fh> };
    close $fh;

    my $tidied = '';
    Perl::Tidy::perltidy(
        source      => \$orig_text,
        destination => \$tidied,
        perltidyrc  => \$perltidyrc,
    );

    if ( index( $orig_text, $tidied ) != 0 ) {
        print diff( \$orig_text, \$tidied );
        print "\nModify? ";
        my $response;
        while (1) {
            chomp( $response = <STDIN> );
            if ( $response !~ /^[yn]/ ) {
                print "Please answer y/n: ";
                next;
            }
            last;
        }
        if ( $response =~ /^y/ ) {
            print "Modifying...\n";
            open( my $f, '>', $path )
                or die "couldn't open '$path' for writing: $!";
            print $f $tidied;
            close $f;
        }
    }
}