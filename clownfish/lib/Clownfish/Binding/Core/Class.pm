# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use warnings;

package Clownfish::Binding::Core::Class;
use Clownfish::Util qw( a_isa_b verify_args );
use Clownfish::Binding::Core::Method;
use Clownfish::Binding::Core::Function;
use File::Spec::Functions qw( catfile );

our %new_PARAMS = ( client => undef, );

sub new {
    my ( $either, %args ) = @_;
    verify_args( \%new_PARAMS, %args ) or confess $@;
    return _new( $args{client} );
}

sub to_c_header {
    my $self          = shift;
    my $client        = $self->_get_client;
    my $cnick         = $client->get_cnick;
    my $functions     = $client->functions;
    my $methods       = $client->methods;
    my $novel_methods = $client->novel_methods;
    my $inert_vars    = $client->inert_vars;
    my $c_file_sym    = "C_" . uc($client->full_struct_sym);
    my $struct_def    = _struct_definition($self);

    # If class inherits from something, include the parent class's header.
    my $parent_include = _parent_include($self);

    # Add a C function definition for each method and each function.
    my $sub_declarations = _sub_declarations($self);

    # Declare class (a.k.a. "inert") variables.
    my $inert_var_defs = _inert_var_declarations($self);

    # Declare typedefs for novel methods, to ease casting.
    my $method_typedefs = _method_typedefs($self);

    # Define method invocation syntax.
    my $method_defs = _method_defs($self);

    # Declare the virtual table singleton object.
    my $vt_singleton_def = _vt_singleton_def($self);

    # Declare cfish_Callback objects.
    my $callback_declarations = _callback_declarations($self);

    # Define short names.
    my $short_names = _short_names($self);

    # Make the spacing in the file a little more elegant.
    s/\s+$// for ( $method_typedefs, $method_defs, $short_names );

    # Inert classes only output inert functions and member vars.
    if ( $client->inert ) {
        return <<END_INERT
#include "charmony.h"
#include "boil.h"
$parent_include

/* Declare this class's inert variables.
 */

$inert_var_defs

/* Declare this class's inert functions.
 */

$sub_declarations

/* Define "short names" for this class's symbols.
 */

$short_names

END_INERT
    }

    # Instantiable classes get everything.
    return <<END_STUFF;

#include "charmony.h"
#include "boil.h"

/* Include the header for this class's parent. 
 */

$parent_include

/* Define the struct layout for instances of this class.
 */

#ifdef $c_file_sym
$struct_def
#endif /* $c_file_sym */

/* Declare this class's inert variables.
 */

$inert_var_defs

/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

$sub_declarations

/* Declare the cfish_Callback objects which provide the introspection
 * information needed to perform method overriding at runtime.
 */

$callback_declarations

/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

$method_typedefs

/* Define the inline functions which implement this class's virtual methods.
 */

$method_defs

/* Define the VTable singleton for this class.
 */

$vt_singleton_def

/* Define "short names" for this class's symbols.
 */

$short_names

END_STUFF
}

1;

__END__

__POD__

=head1 NAME

Clownfish::Binding::Core::Class - Generate core C code for a class.

=head1 DESCRIPTION

Clownfish::Class is an abstract specification for a class.  This module
autogenerates the C code with implements that specification.

=head1 METHODS

=head2 new

    my $class_binding = Clownfish::Binding::Core::Class->new(
        client => $class,
    );

=over

=item * B<client> - A L<Clownfish::Class>.

=back

=head2 to_c_header

Return the .h file which contains autogenerated C code defining the class's
interface:  all method invocation functions, etc...

=head2 to_c

Return the .c file which contains autogenerated C code necessary for the class
to function properly.

=cut
